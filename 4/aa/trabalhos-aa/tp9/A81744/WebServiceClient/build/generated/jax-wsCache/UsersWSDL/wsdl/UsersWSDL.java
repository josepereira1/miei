
package wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "UsersWSDL", targetNamespace = "http://wsdl/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UsersWSDL {


    /**
     * 
     * @param password
     * @param name
     * @return
     *     returns wsdl.User
     * @throws PersistentException_Exception
     * @throws UserNotExistsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "search", targetNamespace = "http://wsdl/", className = "wsdl.Search")
    @ResponseWrapper(localName = "searchResponse", targetNamespace = "http://wsdl/", className = "wsdl.SearchResponse")
    public User search(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws PersistentException_Exception, UserNotExistsException_Exception
    ;

    /**
     * 
     * @param password
     * @param name
     * @return
     *     returns java.lang.String
     * @throws PersistentException_Exception
     * @throws UserNotExistsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "generateToken", targetNamespace = "http://wsdl/", className = "wsdl.GenerateToken")
    @ResponseWrapper(localName = "generateTokenResponse", targetNamespace = "http://wsdl/", className = "wsdl.GenerateTokenResponse")
    public String generateToken(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws PersistentException_Exception, UserNotExistsException_Exception
    ;

    /**
     * 
     * @param name
     * @param token
     * @return
     *     returns wsdl.User
     * @throws PersistentException_Exception
     * @throws UserNotExistsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchWithToken", targetNamespace = "http://wsdl/", className = "wsdl.SearchWithToken")
    @ResponseWrapper(localName = "searchWithTokenResponse", targetNamespace = "http://wsdl/", className = "wsdl.SearchWithTokenResponse")
    public User searchWithToken(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws PersistentException_Exception, UserNotExistsException_Exception
    ;

}
