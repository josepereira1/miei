#!/usr/bin/python3
"""
Xcent - extract and classify named entities
"""

import re
import subprocess
import sys
from getopt import getopt
import fileinput
from collections import Counter

fimfrase = r"[.?!:]\s*"
mark_s = "#s_"
mark_e = ("{","}")
class_p = ':p'      #people
class_l = ':l'      #locations
class_t = ':t'      #time references
class_o = ':o'      #other
class_n = ':'       #not defined

def markS(text):    
    fimfrase = r"([.?!:]+\s*)"  #   queremos capturar o fim de frase
    text = re.sub(fimfrase, r"\1"+ mark_s, text)
    text = re.sub(r"([A-ZÀ-Ü][a-z]?\. )" + mark_s + r"([A-ZÀ-Ü])", r"\1\2", text)
    return text

def markE(text):
    text = markD(text)
    text = re.sub(r'\{(.*?):t\} de \{(.*?):t\}', r'{\1 de \2:t}', text)

    d = r"(?:da|do|de|dos|das)"
    #pM = r"[A-ZÂ]\w+"
    pM = r"(?:[A-ZÀ-Ü]\w+|[A-ZÀ-Ü]\.|[A-ZÀ-Ü][a-z]\.)"
    #nP = pM + " " + "(" + pM + " " + "|" + d + " " + pM + ")*" #feioso, problemas com espaços
    nP = f"{pM}(?: {pM}| {d} {pM})*"
    text = re.sub(r"\b" + f"({nP})", mark_e[0] + r"\1" + mark_e[1], text)
    text = re.sub(r"{{(.*?)}",r"{\1", text)
    return text

def listE(text):
    return re.findall(r"\{(.*?)\}", text)

def printE(entities):
    for ent in entities:
        print(ent)

def bagE(entities):
    return Counter(entities)

def printBagE(b):
    l = sorted(b.items(),key=lambda p: p[1],reverse=True)
    for a,b in l:
        print(b,a)

def markD(txt):
	meses = "janeiro fevereiro março abril maio junho julho agosto setembro outubro novembro dezembro".split()
	estacoes = "primavera verão outono inverno".split()
	dias = [x+"-feira" for x in "segunda terça quarta quinta sexta".split()]+("sábado domingo".split())
	partes = "manhã tarde noite".split()
	txt = re.sub("("+"|".join(meses+estacoes+dias+partes)+")", r'{\1:t}', txt, flags=re.I)
	txt = re.sub(r'(\b\d{4}\b)',r'{\1:t}', txt)
	txt = re.sub(r'(\b(s(é|e)c(?:ulo|ulos|\.)?) [XLDIVMC]+)', r'{\1:t}', txt)
	return txt

def markP(txt):
    word_verbs = "disse dizia falou exclamou perguntou gritou respondeu trouxera murmurou apareceu arranjara vieram actor".split()
    regex_verbs = r'(?:(' + '|'.join(word_verbs) + r') (?:o|a|ao|à)*? *?)'
    regex_pronouns = r'(?:caro|cara|senhor|senhora|sr\.ª*?)'

    regex_arr = []
    regex_arr.append(regex_verbs)
    regex_arr.append(regex_pronouns)

    reg = '(?:' + '|'.join(regex_arr) + ')'
    txt = re.sub(reg + r'\{(\w+?)\}', r'\1 {\2:p}', txt)
    txt = re.sub(r'\{(\w+?)\} ' + regex_verbs, r'{\1:p} \2 ', txt)
    return txt

def markL(txt):
    word_prepositions = "em".split()
    regex_prepositions = '(?:' + '|'.join(word_prepositions) + ')'
    txt = re.sub(r' ' + regex_prepositions + r' (\{\w+?)\}', r'\1:l}', txt)
    return txt

def markSecond(txt):
    markers = [":p", ":t", ":l", ":o"]

    for m in markers:
        regex = r'\{(\w+?)' + m + '}'
        values = []
        for v in re.findall(regex, txt):
            if v not in values:
                values.append(v)

        regex = '({' + '|'.join(values) + ')}'
        txt = re.sub(regex, r'\1' + m + '}', txt)

    return txt


def main():
    opts, resto = getopt(sys.argv[1:], "albdc")
    dop = dict(opts)
    
    texto = ""

    # Reads file
    for line in fileinput.input(resto):
        texto += line

    if "-a" in dop:
        print(markE(markS(texto)))
    elif "-l" in dop:
        printE(listE(markE(markS(texto))))
    elif "-b" in dop:
        printBagE(bagE(listE(markE(markS(texto)))))
    elif "-d" in dop:
        printE(listE(markD(markS(texto))))
    elif "-c" in dop:
        printE(listE(markSecond(markP(markL(markE(markD(markS(texto))))))))

'''
Classificar por :p pessoas
                :l localizações
                :t referências temporais
                :o outros
                : não sei
'''

main()