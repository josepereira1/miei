//package presentation;
package presentation;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.net.Socket;
import java.io.*;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author ricardopetronilho
 */
public class JGS extends javax.swing.JFrame {
    
    private final static long MILLI = 1;
    private final static long SEGUNDO = 1000*MILLI;
    private final static long TEMPO_LEILAO = 5*SEGUNDO;
    private static final long INTERVALO_ATUALIZACAO = 5*SEGUNDO;

    private Socket cliente;
    private PrintWriter pw;
    private BufferedReader br;
    private String msg;
   
        
    /** Creates new form JGS */
    public JGS(Socket cliente, PrintWriter pw, BufferedReader br, String email) {
        initComponents();
        this.setResizable(false);
        
        this.cliente = cliente;
        this.pw = pw;
        this.br = br;
        
        //TODO faz-se isto depois a ir buscar ao servidor
        this.jLabelEmail.setText(email);

        /** Atualizar os servidores disponíveis */
        try {
            msg = leitura("k");
            String[] produtos = msg.split("_"); 
            this.ProdutosDisponiveisCB.removeAllItems(); // corrigir o bug de adiconar itens mesmo que já lá estejam
            for(String p: produtos)
                this.ProdutosDisponiveisCB.addItem(p);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao caregar informações dos servidores disponíveis!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
       /**
        * Esta thread serve apenas para garantir que se existirem vários utilizadores conectados ao servidor com a mesma conta
        * haja atualização entre os dados
        */
        new Thread(new Runnable() {
            
            @Override
            public void run() {
                while(true) {
                    System.err.println("Atualizei!");
                    atualizarDados();
                    lastUpdateTF.setText("Last Update: "+LocalDateTime.now());
                    
                    try {
                        Thread.sleep(INTERVALO_ATUALIZACAO);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
            
        }).start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        servidoresJList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        reservarPedidoJB = new javax.swing.JButton();
        reservarLeilaoJB = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelSaldo = new javax.swing.JLabel();
        ProdutosDisponiveisCB = new javax.swing.JComboBox<>();
        sairJB = new javax.swing.JButton();
        libertarJB = new javax.swing.JButton();
        lastUpdateTF = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                fecharConexao(evt);
            }
        });

        jScrollPane1.setViewportView(servidoresJList);

        jLabel1.setText("Os meus servidores atualmente:");

        reservarPedidoJB.setText("Reservar a pedido");
        reservarPedidoJB.setActionCommand("");
        reservarPedidoJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservarPedidoJBActionPerformed(evt);
            }
        });

        reservarLeilaoJB.setText("Reservar a leilão");
        reservarLeilaoJB.setActionCommand("");
        reservarLeilaoJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservarLeilaoJBActionPerformed(evt);
            }
        });

        jLabel2.setText("email:");

        jLabelEmail.setText("user@gmail.com");

        jLabel5.setText("saldo:");

        jLabelSaldo.setText("-237.83");

        ProdutosDisponiveisCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdutosDisponiveisCBActionPerformed(evt);
            }
        });

        sairJB.setText("sair");
        sairJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairJBActionPerformed(evt);
            }
        });

        libertarJB.setText("Libertar");
        libertarJB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libertarJBMouseClicked(evt);
            }
        });
        libertarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libertarJBActionPerformed(evt);
            }
        });

        lastUpdateTF.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(reservarLeilaoJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(reservarPedidoJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ProdutosDisponiveisCB, 0, 143, Short.MAX_VALUE)
                                    .addComponent(sairJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 1, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(libertarJB))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lastUpdateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(5, 5, 5))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEmail)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelSaldo))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(libertarJB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lastUpdateTF)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservarPedidoJB)
                    .addComponent(ProdutosDisponiveisCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservarLeilaoJB)
                    .addComponent(sairJB))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reservarPedidoJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservarPedidoJBActionPerformed
        String msg;
        try{
            msg = leitura("c_"+this.ProdutosDisponiveisCB.getSelectedItem().toString());
            if(msg.equals("1"))
                JOptionPane.showMessageDialog(this, "Reservado servidor com sucesso!","Informação", JOptionPane.INFORMATION_MESSAGE);
            else if(msg.equals("2"))
                JOptionPane.showMessageDialog(this, "business.Produto não existe, erro interno no sistema!","Erro", JOptionPane.ERROR_MESSAGE);
            else if(msg.equals("3"))
                JOptionPane.showMessageDialog(this, "business.Reserva já existe, erro interno no sisema!","Erro", JOptionPane.ERROR_MESSAGE);
            else if(msg.equals("4"))
                JOptionPane.showMessageDialog(this, "Erro de input!","Erro", JOptionPane.ERROR_MESSAGE);
        }catch(IOException e){
            e.printStackTrace();
        }
        this.atualizarDados();
        
    }//GEN-LAST:event_reservarPedidoJBActionPerformed

    private void ProdutosDisponiveisCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdutosDisponiveisCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProdutosDisponiveisCBActionPerformed

    private void fecharConexao(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_fecharConexao
        this.fecharConexao();
    }//GEN-LAST:event_fecharConexao

    private void sairJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairJBActionPerformed
        this.fecharConexao();
    }//GEN-LAST:event_sairJBActionPerformed

    private void libertarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libertarJBActionPerformed

    }//GEN-LAST:event_libertarJBActionPerformed

    private void libertarJBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libertarJBMouseClicked
        
        int index = -1; // não selecionou nada
       
        // vai buscar o index (posição no JList) do sercidor selecionado
        if ( (index = this.servidoresJList.locationToIndex(evt.getPoint())) >= 0 ) {
            try{
                String reserva = this.servidoresJList.getSelectedValue().split(" ")[0];

                String msg = leitura("e_"+reserva);
                
                if(msg.equals("1"))
                    JOptionPane.showMessageDialog(this, "Libertado com sucesso!","Informação", JOptionPane.INFORMATION_MESSAGE);
                else if(msg.equals("2"))
                    JOptionPane.showMessageDialog(this, "Essa reserva não existe, erro interno do sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
                else if(msg.equals("3"))
                    JOptionPane.showMessageDialog(this, "business.Produto não existe, erro interno do sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
                else if(msg.equals("4"))
                    JOptionPane.showMessageDialog(this, "business.Cliente não existe no sistema, erro interno do sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
                else if(msg.equals("5"))
                    JOptionPane.showMessageDialog(this, "business.Reserva não correspondente, erro interno do sistema!","ERRO", JOptionPane.ERROR_MESSAGE);

            }catch(IOException e){
                e.printStackTrace();
            }
            this.atualizarDados();
            //TODO 
        }
    }//GEN-LAST:event_libertarJBMouseClicked

    private void reservarLeilaoJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservarLeilaoJBActionPerformed
        String res;
        res = this.ProdutosDisponiveisCB.getSelectedItem().toString();
        new JReservarLeilao(res,this.pw,this.br).setVisible(true);
    }//GEN-LAST:event_reservarLeilaoJBActionPerformed

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ProdutosDisponiveisCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelSaldo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastUpdateTF;
    private javax.swing.JButton libertarJB;
    private javax.swing.JButton reservarLeilaoJB;
    private javax.swing.JButton reservarPedidoJB;
    private javax.swing.JButton sairJB;
    private javax.swing.JList<String> servidoresJList;
    // End of variables declaration//GEN-END:variables

    private void fecharConexao() {
        try {
            this.pw.close();
            this.br.close();
            this.cliente.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro interno!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        System.exit(0);
    }
    
    private void atualizarDados() {
        
        String msg;
        
        /** Atualizar as reservas atuais do cliente */
        try {
            msg = leitura("y");
            String[]reservas = msg.split("_");
            DefaultListModel model = new DefaultListModel(); // abstracao visual dos dados
            for(String r : reservas)
                model.addElement(r);
            this.servidoresJList.setModel(model);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao caregar informações das suas reservas atuais!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        /** Atualizar o saldo atual do cliente */
        try {
            msg = leitura("d");
            this.jLabelSaldo.setText(msg);
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao caregar saldo atual do cliente!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        try {
            msg = leitura("w"); //  atualiza os gastos do cliente
            if(msg.equals("1"))
                JOptionPane.showMessageDialog(this, "Erro interno, cliente não existe!","ERRO", JOptionPane.ERROR_MESSAGE);
            else this.jLabelSaldo.setText(msg+" €");
            
        } catch (IOException ex) {
            Logger.getLogger(JGS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String leitura(String pedido) throws IOException{
        this.pw.println(pedido);    //  buscar as reservas do cliente
        this.pw.flush();
        
            String msg;
            msg = br.readLine();
            System.out.println(msg);
            //String[] arr = msg.split("_");
            
            /*if(arr[0].equals("#")){ //  caso em que a primeira mensagem é a notificação de que o utilizador perdeu um servidor
                JOptionPane.showMessageDialog(this, "A reserva "+arr[1]+" foi cancelada!","AVISO", JOptionPane.WARNING_MESSAGE);
                msg = br.readLine();
            }*/
            return msg;
    }
}
