#BlueJ class context
comment0.target=HoteisInc
comment1.params=
comment1.target=HoteisInc()
comment10.params=local
comment10.target=int\ quantos(java.lang.String)
comment11.params=cod
comment11.target=Hotel\ getHotel(java.lang.String)
comment12.params=h
comment12.target=void\ adiciona(Hotel)
comment13.params=
comment13.target=java.util.List\ getHoteis1()
comment14.params=
comment14.target=double\ valorTotal()
comment15.params=
comment15.target=java.util.List\ daoPontos()
comment16.params=hoteis
comment16.target=void\ adiciona(java.util.Set)
comment17.params=tipo
comment17.target=int\ quantosT(java.lang.String)
comment17.text=\ \ getSimpleName\ \u00E9\ vantajoso\ quando\ queremos\ realmente\ uma\ s\u00F3\ class,\ pq\ o\ instanceof\ d\u00E1\ true\ na\ subclasss\ e\ \n\ na\ superclass,\ ou\ seja,\ se\ fosse\ um\ HotelStandard\ e\ um\ HotelDiscount\ o\ instanceof\ d\u00E1\ true\ nos\ dois\ \ne\ no\ entanto\ s\u00E3o\ diferentes,\ o\ getSimpleName()\ vai\ buscar\ mesmo\ o\ nome\ da\ class
comment18.params=
comment18.target=void\ mudaPara()
comment2.params=hoteis
comment2.target=HoteisInc(java.util.Map)
comment3.params=umHotel
comment3.target=HoteisInc(HoteisInc)
comment4.params=
comment4.target=java.util.Map\ getHoteis()
comment5.params=hoteis
comment5.target=void\ setHoteis(java.util.Map)
comment6.params=
comment6.target=HoteisInc\ clone()
comment7.params=o
comment7.target=boolean\ equals(java.lang.Object)
comment8.params=cod
comment8.target=boolean\ existeHotel(java.lang.String)
comment9.params=
comment9.target=int\ quantos()
numComments=19
